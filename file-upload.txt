package com.example.demo;

import jakarta.persistence.*;
import lombok.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.*;
import java.util.List;

@SpringBootApplication
public class FileUploadApp {
    public static void main(String[] args) {
        SpringApplication.run(FileUploadApp.class, args);
    }
}

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
class FileEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String fileName;
    private String fileType;
    private Long fileSize;
    private String filePath;   // saved file path
    private String directory;  // e.g. profileImage / certificate
}

interface FileRepository extends JpaRepository<FileEntity, Long> {
    List<FileEntity> findByDirectory(String directory);
}

@Service
@RequiredArgsConstructor
class FileStorageService {

    private final FileRepository fileRepository;

    @Value("${file.base-dir:uploads}")  // configurable base dir (default: uploads)
    private String baseDir;

    public FileEntity storeFile(MultipartFile file, String directory) throws IOException {
        Path dirPath = Paths.get(baseDir, directory).toAbsolutePath().normalize();
        Files.createDirectories(dirPath);

        String fileName = System.currentTimeMillis() + "_" + file.getOriginalFilename();
        Path targetPath = dirPath.resolve(fileName);
        Files.copy(file.getInputStream(), targetPath, StandardCopyOption.REPLACE_EXISTING);

        FileEntity saved = FileEntity.builder()
                .fileName(fileName)
                .fileType(file.getContentType())
                .fileSize(file.getSize())
                .filePath(targetPath.toString())
                .directory(directory)
                .build();

        return fileRepository.save(saved);
    }

    public FileEntity getFileMetadata(Long id) {
        return fileRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("File not found with id " + id));
    }

    public Resource loadFileAsResourceById(Long id) throws MalformedURLException {
        FileEntity file = getFileMetadata(id);
        Path path = Paths.get(file.getFilePath());
        return new UrlResource(path.toUri());
    }

    public List<FileEntity> getFilesByDirectory(String directory) {
        return fileRepository.findByDirectory(directory);
    }

    public void deleteFile(Long id) throws IOException {
        FileEntity file = getFileMetadata(id);
        Path path = Paths.get(file.getFilePath());
        Files.deleteIfExists(path);
        fileRepository.delete(file);
    }
}

@RestController
@RequestMapping("/api/files")
@RequiredArgsConstructor
class FileController {

    private final FileStorageService fileStorageService;

    // Upload file (directory = "profileImage" or "certificate")
    @PostMapping("/upload")
    public ResponseEntity<FileEntity> uploadFile(@RequestParam("file") MultipartFile file,
                                                 @RequestParam("directory") String directory) throws IOException {
        FileEntity savedFile = fileStorageService.storeFile(file, directory);
        return ResponseEntity.ok(savedFile);
    }

    // Get all files by directory
    @GetMapping("/{directory}")
    public ResponseEntity<List<FileEntity>> getFilesByDirectory(@PathVariable String directory) {
        return ResponseEntity.ok(fileStorageService.getFilesByDirectory(directory));
    }

    // Get single file metadata
    @GetMapping("/metadata/{id}")
    public ResponseEntity<FileEntity> getFileMetadata(@PathVariable Long id) {
        return ResponseEntity.ok(fileStorageService.getFileMetadata(id));
    }

    // Download file
    @GetMapping("/download/{id}")
    public ResponseEntity<Resource> downloadFile(@PathVariable Long id) throws MalformedURLException {
        FileEntity file = fileStorageService.getFileMetadata(id);
        Resource resource = fileStorageService.loadFileAsResourceById(id);

        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + file.getFileName() + "\"")
                .contentType(MediaType.parseMediaType(file.getFileType()))
                .body(resource);
    }

    // Preview inline (image/PDF in browser)
    @GetMapping("/preview/{id}")
    public ResponseEntity<Resource> previewFile(@PathVariable Long id) throws MalformedURLException {
        FileEntity file = fileStorageService.getFileMetadata(id);
        Resource resource = fileStorageService.loadFileAsResourceById(id);

        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=\"" + file.getFileName() + "\"")
                .contentType(MediaType.parseMediaType(file.getFileType()))
                .body(resource);
    }

    // Delete file
    @DeleteMapping("/{id}")
    public ResponseEntity<String> deleteFile(@PathVariable Long id) throws IOException {
        fileStorageService.deleteFile(id);
        return ResponseEntity.ok("File deleted successfully");
    }
}
